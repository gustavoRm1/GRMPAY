# Makefile para Web-Bot
.PHONY: help install dev prod test clean docker-up docker-down logs

# Vari√°veis
NODE_ENV ?= development
PORT ?= 3001
DOCKER_COMPOSE = docker-compose

# Ajuda
help:
	@echo "üöÄ Web-Bot - Comandos dispon√≠veis:"
	@echo ""
	@echo "üì¶ Instala√ß√£o:"
	@echo "  make install          - Instalar depend√™ncias"
	@echo "  make install-windows  - Setup completo Windows"
	@echo "  make install-wsl      - Setup completo WSL/Linux"
	@echo ""
	@echo "üöÄ Execu√ß√£o:"
	@echo "  make dev              - Desenvolvimento (nodemon)"
	@echo "  make prod             - Produ√ß√£o (PM2)"
	@echo "  make start            - Iniciar servidor"
	@echo "  make stop             - Parar servidor"
	@echo ""
	@echo "üê≥ Docker:"
	@echo "  make docker-up        - Subir containers"
	@echo "  make docker-down      - Parar containers"
	@echo "  make docker-build     - Build containers"
	@echo "  make docker-logs      - Ver logs Docker"
	@echo ""
	@echo "üß™ Testes:"
	@echo "  make test             - Executar testes"
	@echo "  make smoke-test       - Teste de fuma√ßa"
	@echo "  make lint             - Linter"
	@echo ""
	@echo "üîß Utilit√°rios:"
	@echo "  make clean            - Limpar cache/node_modules"
	@echo "  make logs             - Ver logs"
	@echo "  make status           - Status dos servi√ßos"

# Instala√ß√£o
install:
	@echo "üì¶ Instalando depend√™ncias..."
	cd backend && npm install
	npm install

install-windows:
	@echo "ü™ü Setup Windows..."
	powershell -ExecutionPolicy Bypass -File scripts/setup_windows.ps1

install-wsl:
	@echo "üêß Setup WSL/Linux..."
	chmod +x scripts/setup_wsl.sh
	./scripts/setup_wsl.sh

# Desenvolvimento
dev:
	@echo "üöÄ Iniciando desenvolvimento..."
	cd backend && npm run dev

prod:
	@echo "üè≠ Iniciando produ√ß√£o..."
	cd backend && pm2 start ecosystem.config.js --env production

start:
	@echo "‚ñ∂Ô∏è Iniciando servidor..."
	cd backend && npm start

stop:
	@echo "‚èπÔ∏è Parando servidor..."
	cd backend && pm2 stop web-bot-backend || pkill -f "node.*server.js" || true

# Docker
docker-up:
	@echo "üê≥ Subindo containers..."
	$(DOCKER_COMPOSE) up -d --build

docker-down:
	@echo "üê≥ Parando containers..."
	$(DOCKER_COMPOSE) down

docker-build:
	@echo "üî® Build containers..."
	$(DOCKER_COMPOSE) build --no-cache

docker-logs:
	@echo "üìã Logs Docker..."
	$(DOCKER_COMPOSE) logs -f

# Testes
test:
	@echo "üß™ Executando testes..."
	cd backend && npm test || echo "‚ö†Ô∏è Testes n√£o configurados"

smoke-test:
	@echo "üí® Teste de fuma√ßa..."
	python scripts/smoke_test.py

lint:
	@echo "üîç Linter..."
	cd backend && npm run lint || echo "‚ö†Ô∏è Linter n√£o configurado"

# Utilit√°rios
clean:
	@echo "üßπ Limpando..."
	rm -rf node_modules backend/node_modules
	rm -rf backend/logs/*.log
	docker system prune -f

logs:
	@echo "üìã Logs do sistema..."
	tail -f backend/logs/combined.log

status:
	@echo "üìä Status dos servi√ßos..."
	@echo "Porta 3001:"
	@netstat -tlnp 2>/dev/null | grep :3001 || lsof -i :3001 2>/dev/null || echo "  N√£o encontrado"
	@echo "Processos Node:"
	@ps aux | grep node | grep -v grep || echo "  Nenhum processo Node encontrado"
	@echo "PM2:"
	@pm2 list 2>/dev/null || echo "  PM2 n√£o dispon√≠vel"
	@echo "Docker:"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "  Docker n√£o dispon√≠vel"



